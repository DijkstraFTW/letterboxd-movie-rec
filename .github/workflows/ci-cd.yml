name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U scikit-learn
        python -m pip install -U pip setuptools wheel Cython
        pip install -U scikit-surprise
        pip install -r requirements.txt
        pip check

    - name: Lint with Flake8
      run: |
        pip install flake8
#        flake8 --ignore=E402 --max-line-length=120  dags --benchmark -v
#        flake8 --max-line-length=120  database --benchmark -v
#        flake8 --max-line-length=120  messaging --benchmark -v
#        flake8 --ignore=W504 --max-line-length=120  prediction/CollaborativeFilteringModel.py --benchmark -v
#        flake8 --ignore=E722 --max-line-length=120  processing --benchmark -v
#        flake8 --max-line-length=120  test --benchmark -v

    - name: Test with Pytest
      run: |
        pip install pytest
        cd test
        pytest dag_tests.py -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Modify EC2 security group to allow SSH
        env:
          AWS_SG_ID: ${{ secrets.AWS_SG_ID }}
        run: |
          MY_IP=$(curl http://checkip.amazonaws.com)
          aws ec2 authorize-security-group-ingress --group-id ${AWS_SG_ID} --protocol tcp --port 22 --cidr ${MY_IP}/32

      - name: Set up env variables
        env:
          ENV: ${{ secrets.ENV }}
        run: |
          echo "${{ secrets.ENV }}" >> env

      - name: Deploy to EC2 using SCP
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 400 private_key.pem
          scp -o StrictHostKeyChecking=no -o ServerAliveInterval=500 -o ServerAliveCountMax=3 -i private_key.pem -r * ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}:/home/ubuntu/app/
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=500 -o ServerAliveCountMax=3 -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "chmod +x /home/ubuntu/app/deploy.sh && /home/ubuntu/app/deploy.sh"

      - name: Revert EC2 security group changes
        if: always()
        env:
          AWS_SG_ID: ${{ secrets.AWS_SG_ID }}
        run: |
          MY_IP=$(curl http://checkip.amazonaws.com)
          aws ec2 revoke-security-group-ingress --group-id ${AWS_SG_ID} --protocol tcp --port 22 --cidr ${MY_IP}/32

      - name: Delete SSH key
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=500 -o ServerAliveCountMax=3 -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "rm -f /home/ubuntu/app/private_key.pem"
          rm -f private_key.pem